version: "3.2"

name: thebank

services:

  redis:
    image: redis:alpine
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 0.5
    ports:
      - "6379:6379"
    networks:
      - thebank-net
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 30s
      retries: 3

  api-gateway:
    build: ./services/api-gateway
    env_file: .env
    restart: always

    deploy:
      replicas: 1

    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql-database:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      contas-service:
        condition: service_healthy
      gerentes-service:
        condition: service_healthy
      clientes-service:
        condition: service_healthy
      fraudes-service:
        condition: service_healthy

    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:3000/api/v1/health || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

    # reservations
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5

    environment:
      - PORT=3000
    volumes:
      - ./services/api-gateway/src:/app/src
    ports:
      - "3000:3000"
    networks:
      - thebank-net

  auth-service:
    build: ./services/auth-service
    env_file: .env
    restart: always

    deploy:
      replicas: 1

    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql-database:
        condition: service_healthy

    healthcheck:
      test: "curl --fail --silent localhost:${SERVER_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5

    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://${MYSQL_URL}/auth"
      SERVER_SERVLET_CONTEXT_PATH: /
      SERVER_PORT: 3000

    volumes:
      - $HOME/.m2:/root/.m2
      - ./services/auth-service:/app
    networks:
      - thebank-net

  clientes-service:
    build: ./services/clientes-service
    env_file: .env
    restart: always

    deploy:
      replicas: 1

    healthcheck:
      test: "curl --fail --silent localhost:${SERVER_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql-database:
        condition: service_healthy

    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5

    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://${MYSQL_URL}/clientes"
      SERVER_SERVLET_CONTEXT_PATH: /
      SERVER_PORT: 3000

    volumes:
      - $HOME/.m2:/root/.m2
      - ./services/clientes-service:/app
    networks:
      - thebank-net

  fraudes-service: 
    build: ./services/fraudes-service
    command: python3 ./manage.py runserver 0.0.0.0:${SERVER_PORT}
    volumes:
      - ./services/fraudes-service:/app
      
    env_file: .env
    restart: always

    deploy:
      replicas: 1

    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5
    
    networks:
      - thebank-net

    ports:
      - "8001:8001"
    
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:${SERVER_PORT}/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 20

    depends_on:
      mysql-database:
        condition: service_healthy
    #   rabbitmq:
    #     condition: service_healthy

  gerentes-service:
    build:
      context: ./services/gerentes-service
      dockerfile: dev.Dockerfile
    env_file: .env
    restart: always

    deploy:
      replicas: 1

    volumes:
      - ./services/gerentes-service:/app

    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:${SERVER_PORT}/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 20

    depends_on:
      mysql-database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

    environment:
      GORM_DSN: "${MYSQL_ROOT_USER}:${MYSQL_ROOT_PASSWORD}@tcp(${MYSQL_URL})/gerentes?charset=utf8&parseTime=True&loc=Local"
    ports:
      - "8080:3000"
    networks:
      - thebank-net

  contas-service:
    build: ./services/contas-service
    env_file: .env
    restart: always

    deploy:
      replicas: 1

    healthcheck:
      test: "curl --fail --silent localhost:${SERVER_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

    # dependencies
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql-database:
        condition: service_healthy

    # reservations
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5

    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://${MYSQL_URL}/contas"
      SERVER_SERVLET_CONTEXT_PATH: /
      SERVER_PORT: 3000

    volumes:
      - $HOME/.m2:/root/.m2
      - ./services/contas-service:/app
    networks:
      - thebank-net

  tests-gun:
    build: ./services/tests-gun
    env_file: .env

    # reservations
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5

    deploy:
      replicas: 1

    depends_on:
      api-gateway:
        condition: service_healthy

    volumes:
      - ./services/tests-gun/src:/app/src
      - ./services/tests-gun/vite.config.ts:/app/vite.config.ts
    ports:
      - "51204:51204"
    networks:
      - thebank-net

  rabbitmq:
    image: rabbitmq:3-management-alpine

    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

    # reservations
    mem_limit: 1g
    mem_reservation: 512m
    cpus: 0.5

    deploy:
      replicas: 1

    ports:
      - 5672:5672
      - 15672:15672
    env_file: .env
    volumes:
      - ./.docker-conf/rabbitmq:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/
      - type: bind
        source: ./services/rabbitmq/plugins
        target: /etc/rabbitmq/enabled_plugins
      - type: bind
        source: ./services/rabbitmq/setup.conf
        target: /etc/rabbitmq/rabbitmq.conf
      - type: bind
        source: ./services/rabbitmq/definitions.json
        target: /etc/rabbitmq/definitions.json

    networks:
      - thebank-net

  mysql-database:
    build: ./services/mysql
    env_file: .env

    # reservations
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 0.5

    deploy:
      replicas: 1

    # healthcheck:
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 3s
      interval: 2s
      retries: 10

    ulimits:
      nproc: 65535
      nofile:
        soft: 26677
        hard: 46677

    volumes:
      - ./.docker-conf/mysql/data/:/var/lib/mysql/
      - ./services/mysql:/docker-entrypoint-initdb.d
      - ./logs/mysql:/var/log/mysql
    networks:
      - thebank-net

  phpmyadmin:
    image: phpmyadmin
    env_file: .env
    environment:
      PMA_HOST: ${MYSQL_HOST}
      PMA_PORT: ${MYSQL_PORT}
    restart: always

    deploy:
      replicas: 1

    depends_on:
      mysql-database:
        condition: service_healthy

    # reservations
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 0.5

    ports:
      - 8081:80
    networks:
      - thebank-net

  loki:
    image: grafana/loki:2.6.1
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 0.5
    ports:
      - "3100"
    volumes:
      # directory must be created first, with uid:gid 10001:10001
      - loki_data:/loki

  promtail:
    image: grafana/promtail:2.6.1
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 0.5
    volumes:
      # custom config will read logs from the containers of
      # this project
      - ./services/grafana/loki-promtail-config.yaml:/etc/promtail/config.yml
      # to read container labels and logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers

  grafana:
    image: grafana/grafana:9.2.2
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 0.5
    ports:
      - "3001:3001"
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_SERVER_HTTP_PORT: "3001"
    volumes:
      # directory must be created first, with uid:gid 472:472
      - grafana_data:/var/lib/grafana
      # automatically configure the loki datasource
      # - ./loki/grafana/provisioning/:/etc/grafana/provisioning/
      - ./services/grafana/grafana-loki-datasource.yaml:/etc/grafana/provisioning/datasources/loki.yaml
    depends_on:
      - loki


volumes:
  loki_data:
  grafana_data:
  rabbitmq_data:
  rabbitmq_log:

networks:
  monitoring:
    driver: bridge
  thebank-net:
    driver: bridge
